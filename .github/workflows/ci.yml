name: Fill metadata & Release output files

on: [push, workflow_dispatch]

jobs:
  do-ci-thing:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout sources
      uses: actions/checkout@v3.1.0
      with:
        submodules: recursive
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    - name: Setup Dart
      uses: dart-lang/setup-dart@v1
    - name: Setup Python 2.7
      uses: actions/setup-python@v4
      with:
        python-version: '2.7'
        cache: 'pip'
    - name: Setup VGMDB cache
      uses: actions/cache@v3
      with:
        path: .vgmdb-cache
        key: vgmdb-cache-key
    - name: Create temp directory
      run: mkdir temp
    - name: Download anime-offline-database-minified.json
      run: curl https://raw.githubusercontent.com/manami-project/anime-offline-database/master/anime-offline-database-minified.json -o temp/anime-offline-database-minified.json
    - name: Checkout hufman/vgmdb
      uses: actions/checkout@v3.1.0
      with:
        repository: 'hufman/vgmdb'
        path: temp/vgmdb
    - name: Install vgmdb python dependencies
      run: pip install -r temp/vgmdb/requirements.txt
    - name: Run vgmdb API server
      run: python run.py &
      working-directory: temp/vgmdb
    - name: Install Dart dependencies
      run: dart pub get
      working-directory: ./nrs_mod
    - name: Run fill_music_metadata.dart
      run: dart run scripts/fill_music_metadata.dart .. http://0.0.0.0:9990
      working-directory: nrs_mod
    - name: Install Python dependencies
      run: pip install -r scripts/requirements.txt
    - name: Run Gradle task :updateWithoutSync
      run: ./gradlew updateWithoutSync
    - name: Make commit
      uses: stefanzweifel/git-auto-commit-action@v4
      if: ${{ !contains(github.ref, 'dependabot') }}
      with:
        commit_message: 'chore(impl): :bookmark: Filled metadata'
    - name: Split branch name
      id: split
      run: echo "fragment=${BRANCH##*/}" >> $GITHUB_OUTPUT
      env:
        BRANCH: ${{ github.ref_name }}
    - name: Get release tag suffix
      id: release_tag_name
      run: echo "fragment=$(date +'%Y%m%d-%H%M')" >> $GITHUB_OUTPUT
    - name: Create release
      uses: marvinpinto/action-automatic-releases@latest
      if: ${{ !contains(github.ref, 'dependabot') }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "${{ steps.release_tag_name.outputs.fragment }}-${{ steps.split.outputs.fragment }}"
        title: " ${{ steps.split.outputs.fragment }} #${{ github.run_number }}"
        prerelease: false
        files: |
          output/entries.json
          output/scores.json
          output/impacts.json
          output/relations.json
          output/nrs.csv
    - name: Update latest release
      uses: marvinpinto/action-automatic-releases@latest
      if: ${{ !contains(github.ref, 'dependabot') }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest-${{ steps.split.outputs.fragment }}"
        title: "Latest NRS output files (branch ${{ steps.split.outputs.fragment }})"
        prerelease: false
        files: |
          output/entries.json
          output/scores.json
          output/impacts.json
          output/relations.json
          output/nrs.csv
